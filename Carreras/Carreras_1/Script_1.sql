 DROP SCHEMA IF EXISTS CARRERAS_1;
 CREATE DATABASE IF NOT EXISTS CARRERAS_1;
 USE CARRERAS_1;
 
 DROP TABLE IF EXISTS CARRERAS_1.USUARIOS;
 CREATE TABLE USUARIOS (
	ID_USUARIO	INT UNSIGNED AUTO_INCREMENT,
	USUARIO	  	VARCHAR(40),
    CREDITO		DEC(10,2),
    BAJA CHAR(1),
	CONSTRAINT PK_USUARIOS PRIMARY KEY(ID_USUARIO),
    CONSTRAINT U_USUARIOS UNIQUE KEY(USUARIO)
 );
 
 DROP TABLE IF EXISTS CARRERAS_1.CABALLOS;
 CREATE TABLE CABALLOS(
	ID_CABALLO  INT AUTO_INCREMENT,
	NOMBRE		VARCHAR(40),
    PUESTO	    INT,
    BAJA CHAR(1),
	CONSTRAINT PK_CABALLOS PRIMARY KEY(ID_CABALLO),
    CONSTRAINT U_NOMBRE UNIQUE KEY(NOMBRE)
);

DROP TABLE IF EXISTS RESULTADO;
 CREATE TABLE RESULTADO (
	ID_CARRERA INT AUTO_INCREMENT,
    PUESTO1 INT,
    PUESTO2 INT,
    PUESTO3 INT,
    PUESTO4 INT,
    PUESTO5 INT,
    PUESTO6 INT,
    PUESTO7 INT,
    CONSTRAINT PK_CARRERAS PRIMARY KEY (ID_CARRERA),
    CONSTRAINT FK_RESULTADO_CAB1 FOREIGN KEY (PUESTO1) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_RESULTADO_CAB2 FOREIGN KEY (PUESTO2) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_RESULTADO_CAB3 FOREIGN KEY (PUESTO3) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_RESULTADO_CAB4 FOREIGN KEY (PUESTO4) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_RESULTADO_CAB5 FOREIGN KEY (PUESTO5) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_RESULTADO_CAB6 FOREIGN KEY (PUESTO6) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_RESULTADO_CAB7 FOREIGN KEY (PUESTO7) REFERENCES CABALLOS(ID_CABALLO)
);

 DROP TABLE IF EXISTS CARRERAS_1.APUESTAS;
 CREATE TABLE APUESTAS(
	ID_APUESTA	INT,
    ID_USUARIO	INT UNSIGNED,
    ID_CARRERA INT,
	ID_PRIMERO  INT,
    ID_SEGUNDO  INT,
    ID_TERCERO  INT,
    ID_CUARTO   INT,
    ID_QUINTO   INT,
    ID_SEXTO    INT,
    ID_SEPTIMO  INT,
	CANTIDAD	DEC(10,2),
    CONSTRAINT FK_APUESTAS_USUARIOS FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO),
    CONSTRAINT FK_APUESTAS_CAB1 FOREIGN KEY (ID_PRIMERO) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_APUESTAS_CAB2 FOREIGN KEY (ID_SEGUNDO) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_APUESTAS_CAB3 FOREIGN KEY (ID_TERCERO) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_APUESTAS_CAB4 FOREIGN KEY (ID_CUARTO) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_APUESTAS_CAB5 FOREIGN KEY (ID_QUINTO) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_APUESTAS_CAB6 FOREIGN KEY (ID_SEXTO) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_APUESTAS_CAB7 FOREIGN KEY (ID_SEPTIMO) REFERENCES CABALLOS(ID_CABALLO),
    CONSTRAINT FK_APUESTAS_RESULTADO FOREIGN KEY (ID_CARRERA) REFERENCES RESULTADO(ID_CARRERA)
 );
   

DROP TABLE IF EXISTS BANCA;
CREATE TABLE BANCA (
	ID_TRANSACCION INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
    TIPO CHAR(50),
    CANTIDAD DECIMAL(10,2),
    TOTAL DECIMAL(12, 2)
);


DELIMITER $$
DROP PROCEDURE IF EXISTS PR_APUESTA$$
    CREATE PROCEDURE PR_APUESTA(IN PE_ID_USUARIO INT,
								 IN PE_ID_CARRERA INT,
								 IN PE_ID_PRIMERO INT,
								 IN PE_ID_SEGUNDO INT,
								 IN PE_ID_TERCERO INT,
								 IN PE_ID_CUARTO  INT,
								 IN PE_ID_QUINTO  INT,
								 IN PE_ID_SEXTO  INT, 
								 IN PE_ID_SEPTIMO INT,
								 IN PE_CANTIDAD DECIMAL(10,2),
                                 OUT PS_ID_APUESTA INT)
BEGIN
	IF PE_ID_PRIMERO NOT IN (1, 2, 3, 4, 5, 6, 7) OR
	   PE_ID_SEGUNDO NOT IN (1, 2, 3, 4, 5, 6, 7) OR
       PE_ID_TERCERO NOT IN (1, 2, 3, 4, 5, 6, 7, NULL) OR
       PE_ID_CUARTO NOT IN (1, 2, 3, 4, 5, 6, 7, NULL) OR
       PE_ID_QUINTO NOT IN (1, 2, 3, 4, 5, 6, 7, NULL) OR
       PE_ID_SEXTO NOT IN (1, 2, 3, 4, 5, 6, 7, NULL) OR
       PE_ID_SEPTIMO NOT IN (1, 2, 3, 4, 5, 6, 7, NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Los puestos s칩lo pueden ir del 1 al 7.';
    END IF;
    -- EL CASO EN EL QUE LA CARRERA NO EXISTE
    SET @ID_CARRERA = NULL;
    SELECT ID_CARRERA
		FROM RESULTADO
		WHERE ID_CARRERA = PE_ID_CARRERA INTO @ID_CARRERA;
	IF @ID_CARRERA IS NULL THEN
		SET @MENSAJE = CONCAT('La carrera ', PE_ID_CARRERA, ' no existe.');
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
    END IF;
    -- EL CASO EN EL QUE EL USUARIO NO EXISTE
	SET @ID_USUARIO = NULL;
	SELECT ID_USUARIO
		FROM USUARIOS
        WHERE ID_USUARIO = PE_ID_USUARIO INTO @ID_USUARIO;
	IF @ID_USUARIO IS NULL THEN
		SET @MENSAJE = CONCAT('El usuario ', PE_ID_USUARIO, ' no existe.');
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
	END IF;
    
    -- Si todas las comprobaciones son correctas...
    INSERT INTO APUESTAS VALUES(DEFAULT,
								PE_ID_USUARIO,
                                 PE_ID_CARRERA,
                                 PE_ID_PRIMERO,
                                 PE_ID_SEGUNDO,
                                 PE_ID_TERCERO,
                                 PE_ID_CUARTO, 
                                 PE_ID_QUINTO, 
                                 PE_ID_SEXTO,
                                 PE_ID_SEPTIMO,
                                 PE_CANTIDAD);
	SELECT LAST_INSERT_ID() INTO PS_ID_APUESTA;
END
$$


DROP PROCEDURE IF EXISTS PR_ALTA_CABALLO$$
CREATE PROCEDURE PR_ALTA_CABALLO(IN PE_NOMBRE VARCHAR(40))
BEGIN
	SET @NOMBRE = NULL;
    SET @BAJA = NULL;
	SELECT NOMBRE, BAJA
		FROM CABALLOS
        WHERE NOMBRE = PE_NOMBRE INTO @NOMBRE, @BAJA;
	IF @NOMBRE IS NOT NULL THEN
		IF @BAJA = '' THEN
			SET @MENSAJE = CONCAT('El caballo ', PE_NOMBRE, ' ya existe; por favor, escoja otro nombre para el caballo.');
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
		ELSE
			UPDATE CABALLOS
				SET BAJA = ''
                WHERE NOMBRE = PE_NOMBRE;
		END IF;
	ELSE
		INSERT INTO CABALLOS (NOMBRE, BAJA) 
						VALUES (PE_NOMBRE, '');
    END IF;
END  
$$
                               
DROP PROCEDURE IF EXISTS PR_ALTA_USUARIO$$
CREATE PROCEDURE PR_ALTA_USUARIO(IN PE_USUARIO VARCHAR(40),
								 IN PE_CREDITO DECIMAL(10,2))
BEGIN	
		SET @ID_USUARIO = NULL;
        SET @BAJA = NULL;
		SELECT ID_USUARIO, BAJA
			FROM USUARIOS
            WHERE USUARIO = PE_USUARIO
				INTO @ID_USUARIO, @BAJA;
	IF @ID_USUARIO IS NULL THEN
		INSERT INTO USUARIOS (USUARIO, CREDITO) 
					VALUES (PE_USUARIO, PE_CREDITO);
	ELSEIF @BAJA = '' THEN
		SET @MENSAJE = CONCAT('El usuario ', PE_USUARIO, ' ya existe; por favor, escoja otro nombre.');
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
	ELSE
		UPDATE USUARIOS SET BAJA = '' WHERE USUARIO = PE_USUARIO;
    END IF;
END
$$
                                 
DROP PROCEDURE IF EXISTS PR_RECARGA_CREDITO$$
CREATE PROCEDURE PR_RECARGA_CREDITO(IN PE_USUARIO VARCHAR(40),
								 IN PE_CANTIDAD DECIMAL(10, 2))
BEGIN
	SET @USUARIO = NULL;
    SELECT COUNT(*)
		FROM USUARIOS
        WHERE USUARIO = PE_USUARIO INTO @USUARIO;
	IF @USUARIO = 1 THEN
		UPDATE USUARIOS
			SET CREDITO = CREDITO + PE_CANTIDAD
            WHERE USUARIO = PE_USUARIO;
	ELSE 
		SET @MENSAJE = CONCAT('El usuario ', PE_USUARIO, ' no existe.');
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
	END IF;
END
$$

DROP PROCEDURE IF EXISTS PR_BAJA_CABALLO$$
CREATE PROCEDURE PR_BAJA_CABALLO(IN PE_NOMBRE CHAR(40))
BEGIN

	SET @NOMBRE_CABALLO = NULL;
	SET @BAJA = NULL;
	SELECT NOMBRE, BAJA
		FROM CABALLOS
        WHERE NOMBRE = PE_NOMBRE INTO @NOMBRE_CABALLO, @BAJA;
        IF @NOMBRE_CABALLO IS NULL THEN
			SET @MENSAJE = CONCAT('El caballo ', PE_NOMBRE, ' no existe. Por tanto, no puedo darlo de baja.');
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
		ELSEIF @BAJA = 'X' THEN
			SET @MENSAJE = CONCAT('El caballo ', PE_NOMBRE, ' ya est치 de baja.');
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
		ELSE
			UPDATE CABALLOS
				SET BAJA = 'X'
                WHERE NOMBRE = PE_NOMBRE;
		END IF;	

END
$$

DROP PROCEDURE IF EXISTS PR_BAJA_USUARIO$$
CREATE PROCEDURE PR_BAJA_USUARIO(IN PE_USUARIO CHAR(40))
BEGIN

	SET @NOMBRE_USUARIO = NULL;
    SET @BAJA = NULL;
	SELECT USUARIO, BAJA
		FROM USUARIOS
        WHERE USUARIO = PE_USUARIO INTO @NOMBRE_USUARIO, @BAJA;
        IF @NOMBRE_USUARIO IS NULL THEN
			SET @MENSAJE = CONCAT('El usuario ', PE_USUARIO, ' no existe. Por tanto, no puedo darlo de baja.');
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
		ELSEIF @BAJA = 'X' THEN
			SET @MENSAJE = CONCAT('El usuario ', PE_USUARIO, ' ya est치 de baja.');
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
		ELSE
			UPDATE USUARIOS
				SET BAJA = 'X'
                WHERE USUARIO = PE_USUARIO;
		END IF;	

END
$$

DROP PROCEDURE IF EXISTS PR_ALTA_CARRERA$$
CREATE PROCEDURE PR_ALTA_CARRERA(OUT PS_ID_CARRERA INT)
BEGIN
	INSERT INTO RESULTADO (PUESTO1, 
						PUESTO2,
						PUESTO3,
						PUESTO4,
						PUESTO5,
						PUESTO6, 
						PUESTO7)
                        VALUES (NULL, NULL, NULL, NULL, NULL, NULL, NULL);
	SELECT LAST_INSERT_ID() INTO PS_ID_CARRERA;
END
$$

DROP PROCEDURE IF EXISTS PR_RESULTADO$$
CREATE PROCEDURE PR_RESULTADO(IN PE_ID_CARRERA INT,
							  IN PE_ID_PRIMERO INT,
                              IN PE_ID_SEGUNDO INT,
							  IN PE_ID_TERCERO INT,
							  IN PE_ID_CUARTO INT,
							  IN PE_ID_QUINTO INT,
                              IN PE_ID_SEXTO INT,
                              IN PE_ID_SEPTIMO INT)
BEGIN
	IF PE_ID_PRIMERO NOT IN (1, 2, 3, 4, 5, 6, 7) OR
	   PE_ID_SEGUNDO NOT IN (1, 2, 3, 4, 5, 6, 7) OR
       PE_ID_TERCERO NOT IN (1, 2, 3, 4, 5, 6, 7, NULL) OR
       PE_ID_CUARTO NOT IN (1, 2, 3, 4, 5, 6, 7, NULL) OR
       PE_ID_QUINTO NOT IN (1, 2, 3, 4, 5, 6, 7, NULL) OR
       PE_ID_SEXTO NOT IN (1, 2, 3, 4, 5, 6, 7, NULL) OR
       PE_ID_SEPTIMO NOT IN (1, 2, 3, 4, 5, 6, 7, NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Los puestos s칩lo pueden ir del 1 al 7.';
    END IF;
	SET @ID_CARRERA = NULL;
    SET @PUESTO1 = NULL;
	SELECT ID_CARRERA, PUESTO1
		FROM RESULTADO
			WHERE ID_CARRERA = PE_ID_CARRERA INTO @ID_CARRERA, @PUESTO1;
	IF @ID_CARRERA IS NULL THEN
		SET @MENSAJE = CONCAT('La carrera con ID ', PE_ID_CARRERA, ' no existe.');
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
	ELSEIF @PUESTO1 IS NOT NULL THEN
		SET @MENSAJE = CONCAT('La carrera con ID ', PE_ID_CARRERA,
							  ' ya est치 cerrada.');
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
	ELSE
	UPDATE RESULTADO SET
				PUESTO1 = PE_ID_PRIMERO, 
				PUESTO2 = PE_ID_SEGUNDO,
				PUESTO3 = PE_ID_TERCERO,
				PUESTO4 = PE_ID_CUARTO,
				PUESTO5 = PE_ID_QUINTO,
				PUESTO6 = PE_ID_SEXTO, 
				PUESTO7 = PE_ID_SEPTIMO
                        WHERE ID_CARRERA = PE_ID_CARRERA;
	END IF;
END
$$

call carreras.PR_ALTA_CABALLO('Rocinante');
call carreras.PR_ALTA_CABALLO('Imperioso');
call carreras.PR_ALTA_CABALLO('Platero');
call carreras.PR_ALTA_CABALLO('Dominante');
call carreras.PR_ALTA_CABALLO('Babieca');
call carreras.PR_ALTA_CABALLO('Lucero');
call carreras.PR_ALTA_CABALLO('Pegasus');
call carreras.PR_ALTA_CABALLO('Black Power');
