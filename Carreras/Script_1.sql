 DROP SCHEMA IF EXISTS CARRERAS_1;
 CREATE DATABASE IF NOT EXISTS CARRERAS_1;
 USE CARRERAS_1;
 
 DROP TABLE IF EXISTS CARRERAS_1.USUARIOS;
 CREATE TABLE USUARIOS (
	ID_USUARIO	INT UNSIGNED,
	USUARIO	  	VARCHAR(40),
    CREDITO		DEC(10,2),
    BAJA CHAR(1),
	CONSTRAINT PK_USUARIOS PRIMARY KEY(ID_USUARIO),
    CONSTRAINT U_USUARIOS UNIQUE KEY(USUARIO)
 );
 
 DROP TABLE IF EXISTS CARRERAS_1.CABALLOS;
 CREATE TABLE CABALLOS(
	ID_CABALLO  INT,
	NOMBRE		VARCHAR(40),
    PUESTO	    INT,
    BAJA CHAR(1),
	CONSTRAINT PK_CABALLOS PRIMARY KEY(ID_CABALLO)
);
 DROP TABLE IF EXISTS CARRERAS_1.APUESTAS;
 CREATE TABLE APUESTAS(
	ID_APUESTA	INT,
    ID_USUARIO	INT UNSIGNED,
	ID_PRIMERO  INT,
    ID_SEGUNDO  INT,
    ID_TERCERO  INT,
    ID_CUARTO   INT,
    ID_QUINTO   INT,
    ID_SEXTO    INT,
    ID_SEPTIMO  INT,
	CANTIDAD	DEC(10,2),
    CONSTRAINT FK_APUESTAS_USUARIOS FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO),
    CONSTRAINT FK_APUESTAS_CAB1 FOREIGN KEY (ID_PRIMERO) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_APUESTAS_CAB2 FOREIGN KEY (ID_SEGUNDO) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_APUESTAS_CAB3 FOREIGN KEY (ID_TERCERO) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_APUESTAS_CAB4 FOREIGN KEY (ID_CUARTO) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_APUESTAS_CAB5 FOREIGN KEY (ID_QUINTO) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_APUESTAS_CAB6 FOREIGN KEY (ID_SEXTO) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_APUESTAS_CAB7 FOREIGN KEY (ID_SEPTIMO) REFERENCES CABALLOS(ID_CABALLO)
 );

 CREATE TABLE RESULTADO (
	ID_CARRERA INT AUTO_INCREMENT,
    PUESTO1 INT,
    PUESTO2 INT,
    PUESTO3 INT,
    PUESTO4 INT,
    PUESTO5 INT,
    PUESTO6 INT,
    PUESTO7 INT,
    CONSTRAINT PK_CARRERAS PRIMARY KEY (ID_CARRERA),
    CONSTRAINT FK_RESULTADO_CAB1 FOREIGN KEY (PUESTO1) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_RESULTADO_CAB2 FOREIGN KEY (PUESTO2) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_RESULTADO_CAB3 FOREIGN KEY (PUESTO3) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_RESULTADO_CAB4 FOREIGN KEY (PUESTO4) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_RESULTADO_CAB5 FOREIGN KEY (PUESTO5) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_RESULTADO_CAB6 FOREIGN KEY (PUESTO6) REFERENCES CABALLOS(ID_CABALLO),
	CONSTRAINT FK_RESULTADO_CAB7 FOREIGN KEY (PUESTO7) REFERENCES CABALLOS(ID_CABALLO)
);   

DROP TABLE IF EXISTS BANCA;
CREATE TABLE BANCA (
	ID_TRANSACCION INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
    TIPO CHAR(50),
    CANTIDAD DECIMAL(10,2),
    TOTAL DECIMAL(12, 2)
);


DELIMITER $$
DROP PROCEDURE IF EXISTS APUESTA$$
    CREATE PROCEDURE APUESTA(IN PE_ID_USUARIO INT,
							 IN PE_ID_GANADOR INT,
							 IN PE_CANTIDAD DEC(10,2))
		BEGIN
        DECLARE CABALLO INT;
		DECLARE CREDITO_USUARIO DEC(10,2);
        -- Limpio la variablE CABALLO
        SET CABALLO = NULL;
			SELECT ID_CABALLO INTO CABALLO 
			FROM CABALLOS WHERE ID_CABALLO = PE_ID_GANADOR;  
				IF CABALLO IS NULL THEN	
					SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'EL caballo no existe';
				ELSE
					SET CREDITO_USUARIO = NULL;
					SELECT CREDITO INTO CREDITO_USUARIO 
					FROM USUARIOS WHERE ID_USUARIO = PE_ID_USUARIO;
				IF CREDITO_USUARIO < PE_CANTIDAD THEN
					SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'EL Usuario no tiene sufuciente crédito para
																cubrir la apuesta';
				ELSE
		-- ENGLOBAMOS LA INSERCIÓN Y LA ACTUALIZACIÓN EN UNA TRANSACCIÓN PARA QUE SE EJECUTEN
        -- COMO UNA ÚNICA ACCIÓN Y NO PUEDA HACERSE UNA SIN QUE SE HAGA LA OTRA
        START TRANSACTION;
        -- INSERCIÓN EN APUESTAS
			INSERT INTO APUESTAS (ID_USUARIO, ID_GANADOR, CANTIDAD)
					VALUES(PE_ID_USUARIO, PE_ID_GANADOR, PE_CANTIDAD);
		-- ACTUALIZACIÓN DE USUARIOS
			UPDATE USUARIOS 
				SET CREDITO = CREDITO - PE_CANTIDAD 
                WHERE ID_USUARIO = PE_ID_USUARIO;
        COMMIT;
        
        END IF;
	END IF;
END
$$

DROP PROCEDURE IF EXISTS RECARGA_CREDITO$$
CREATE PROCEDURE RECARGA_CREDITO(IN PE_USUARIO VARCHAR(40),
								 IN PE_CANTIDAD DECIMAL(10,2))
BEGIN
	IF EXISTS (SELECT USUARIO
		FROM USUARIOS
        WHERE USUARIO = PE_USUARIO) THEN
    UPDATE USUARIOS
		SET CREDITO = CREDITO + PE_CANTIDAD
        WHERE USUARIO = PE_USUARIO;
	ELSE
		SET @MENSAJE = CONCAT('El usuario ', PE_USUARIO, ' no existe');
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
	END IF;
END
$$

DROP PROCEDURE IF EXISTS ALTA_CABALLO$$
CREATE PROCEDURE ALTA_CABALLO(IN PE_NOMBRE VARCHAR(40))
BEGIN
	SET @NOMBRE = NULL;
    SET @BAJA = NULL;
	SELECT NOMBRE, BAJA
		FROM CABALLOS
        WHERE NOMBRE = PE_NOMBRE INTO @NOMBRE, @BAJA;
	IF @NOMBRE IS NOT NULL THEN
		IF @BAJA = '' THEN
			SET @MENSAJE = CONCAT('El caballo ', PE_NOMBRE, ' ya existe; por favor, escoja otro nombre para el caballo.');
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
		ELSE
			UPDATE CABALLOS
				SET BAJA = ''
                WHERE NOMBRE = PE_NOMBRE;
		END IF;
	ELSE
		INSERT INTO CABALLOS (NOMBRE) 
						VALUES (PE_NOMBRE);
    END IF;
END  
$$
                               
DROP PROCEDURE IF EXISTS ALTA_USUARIO$$
CREATE PROCEDURE ALTA_USUARIO(IN PE_USUARIO VARCHAR(40),
								 IN PE_CREDITO DECIMAL(10,2))
BEGIN	
		SET @ID_USUARIO = NULL;
        SET @BAJA = NULL;
		SELECT ID_USUARIO, BAJA
			FROM USUARIOS
            WHERE USUARIO = PE_USUARIO
				INTO @ID_USUARIO, @BAJA;
	IF @ID_USUARIO IS NULL THEN
		INSERT INTO USUARIOS (USUARIO, CREDITO) 
					VALUES (PE_USUARIO, PE_CREDITO);
	ELSEIF @BAJA = '' THEN
		SET @MENSAJE = CONCAT('El usuario ', PE_USUARIO, ' ya existe; por favor, escoja otro nombre.');
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
	ELSE
		UPDATE USUARIOS SET BAJA = '' WHERE USUARIO = PE_USUARIO;
    END IF;
END
$$
                                 
DROP PROCEDURE IF EXISTS RECARGA_CREDITO$$
CREATE PROCEDURE RECARGA_CREDITO(IN PE_USUARIO VARCHAR(40),
								 IN PE_CANTIDAD DECIMAL(10, 2))
BEGIN
	SET @USUARIO = NULL;
    SELECT COUNT(*)
		FROM USUARIOS
        WHERE USUARIO = PE_USUARIO INTO @USUARIO;
	IF @USUARIO = 1 THEN
		UPDATE USUARIOS
			SET CREDITO = CREDITO + PE_CANTIDAD
            WHERE USUARIO = PE_USUARIO;
	ELSE 
		SET @MENSAJE = CONCAT('El usuario ', PE_USUARIO, ' no existe.');
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
	END IF;
END
$$

DROP PROCEDURE IF EXISTS BAJA_CABALLO$$
CREATE PROCEDURE BAJA_CABALLO(IN PE_NOMBRE CHAR(40))
BEGIN

	SET @NOMBRE_CABALLO = NULL;
	SET @BAJA = NULL;
	SELECT NOMBRE, BAJA
		FROM CABALLOS
        WHERE NOMBRE = PE_NOMBRE INTO @NOMBRE_CABALLO, @BAJA;
        IF @NOMBRE_CABALLO IS NULL THEN
			SET @MENSAJE = CONCAT('El caballo ', PE_NOMBRE, ' no existe. Por tanto, no puedo darlo de baja.');
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
		ELSEIF @BAJA = 'X' THEN
			SET @MENSAJE = CONCAT('El caballo ', PE_NOMBRE, ' ya está de baja.');
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
		ELSE
			UPDATE CABALLOS
				SET BAJA = 'X'
                WHERE NOMBRE = PE_NOMBRE;
		END IF;	

END
$$

DROP PROCEDURE IF EXISTS BAJA_USUARIO$$
CREATE PROCEDURE BAJA_USUARIO(IN PE_USUARIO CHAR(40))
BEGIN

	SET @NOMBRE_USUARIO = NULL;
    SET @BAJA = NULL;
	SELECT USUARIO, BAJA
		FROM USUARIOS
        WHERE USUARIO = PE_USUARIO INTO @NOMBRE_USUARIO, @BAJA;
        IF @NOMBRE_USUARIO IS NULL THEN
			SET @MENSAJE = CONCAT('El usuario ', PE_USUARIO, ' no existe. Por tanto, no puedo darlo de baja.');
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
		ELSEIF @BAJA = 'X' THEN
			SET @MENSAJE = CONCAT('El usuario ', PE_USUARIO, ' ya está de baja.');
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @MENSAJE;
		ELSE
			UPDATE USUARIOS
				SET BAJA = 'X'
                WHERE USUARIO = PE_USUARIO;
		END IF;	

END
$$


